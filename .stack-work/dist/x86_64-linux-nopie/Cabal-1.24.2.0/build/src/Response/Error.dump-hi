
==================== FINAL INTERFACE ====================
2018-01-26 13:17:41.373021691 UTC

interface Webserver-0.1.0.0-2wIQjDRlL5PNyKB5c30ID:Response.Error 8002
  interface hash: 44d8c56d14fe64e482b7245aa147b8d4
  ABI hash: b2c8266c520c04f6411f368c45b18c9d
  export-list hash: b758e62580fd0897c79f914642b73e71
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c4358ba65915fccc5daf4c0fcff8109e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Response.Error.Error{Response.Error.FileDoesNotExist Response.Error.OtherError}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
6fa3f0a3f33a5f07af56440a4f91a6e4
  $fShowError :: GHC.Show.Show Response.Error.Error
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Response.Error.Error
                  Response.Error.$fShowError_$cshowsPrec
                  Response.Error.$fShowError_$cshow
                  Response.Error.$fShowError_$cshowList -}
6fa3f0a3f33a5f07af56440a4f91a6e4
  $fShowError1 ::
    Response.Error.Error -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Response.Error.Error)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Response.Error.$fShowError_$cshow x)
                   s) -}
06831afd51f82f824c27f4f2f323cfd7
  $fShowError2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Request could not be processed due to unknown reasons"#) -}
2749da80aca5cf20989b380339c2cd64
  $fShowError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " does not exist"#) -}
6fa3f0a3f33a5f07af56440a4f91a6e4
  $fShowError_$cshow :: Response.Error.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Response.Error.Error) ->
                 case ds of wild {
                   Response.Error.FileDoesNotExist path
                   -> GHC.CString.unpackAppendCString#
                        "File "#
                        (GHC.Base.++ @ GHC.Types.Char path Response.Error.$fShowError3)
                   Response.Error.OtherError -> Response.Error.$fShowError2 }) -}
6fa3f0a3f33a5f07af56440a4f91a6e4
  $fShowError_$cshowList :: [Response.Error.Error] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Response.Error.Error])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Response.Error.Error
                   Response.Error.$fShowError1
                   ls
                   s) -}
6fa3f0a3f33a5f07af56440a4f91a6e4
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Response.Error.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Response.Error.Error)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Response.Error.$fShowError_$cshow x))
                   s) -}
db73b43f34782168d64828ce2cd69134
  $tc'FileDoesNotExist :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8943720707809449891##
                   17866245927294566881##
                   Response.Error.$trModule
                   Response.Error.$tc'FileDoesNotExist1) -}
8622ec1395858d543b131563c1e4b7f7
  $tc'FileDoesNotExist1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FileDoesNotExist"#) -}
8e75ed7ad0593883a207e6d0a171e18c
  $tc'OtherError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10291121082817669525##
                   17704013853624988141##
                   Response.Error.$trModule
                   Response.Error.$tc'OtherError1) -}
9da85c428893e6a36c589ebaaaced4d8
  $tc'OtherError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OtherError"#) -}
7d34a3fd64257b3e02a735c3ca759bf8
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3860801401078631648##
                   1178239089479103641##
                   Response.Error.$trModule
                   Response.Error.$tcError1) -}
bf80d7dec5d538ee5711089e2fbeb355
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Error"#) -}
bf176efb279e217ea33dd5e2af0d7a39
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Response.Error.$trModule2
                   Response.Error.$trModule1) -}
66be4485d8fd13856598f9dbc258438f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Response.Error"#) -}
59d016e6c0c3ae645b3eebc5b49d6034
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Webserver-0.1.0.0-2wIQjDRlL5PNyKB5c30ID"#) -}
6fa3f0a3f33a5f07af56440a4f91a6e4
  data Error = FileDoesNotExist GHC.Base.String | OtherError
instance [safe] GHC.Show.Show [Response.Error.Error]
  = Response.Error.$fShowError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

