-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Short description of your package
--   
--   Please see the README on Github at
--   <a>https://github.com/githubuser/Webserver#readme</a>
@package Webserver
@version 0.1.0.0


-- | This module describes HTTP status codes.
module Response.StatusCode

-- | Represents an HTTP StatusCode
data StatusCode
StatusCode :: Code -> Integer -> [Char] -> StatusCode
[code] :: StatusCode -> Code
[statusCode] :: StatusCode -> Integer
[reasonPharse] :: StatusCode -> [Char]
data Code

-- | Extract the numeric status code from a StatusCode
getStatusCode :: StatusCode -> Integer

-- | Extract the reason pharse from a StatusCode
getReasonPhrase :: StatusCode -> [Char]
ok :: StatusCode
notFound :: StatusCode


-- | Module modeling an HTTP Response and its transformation to a
--   BysteString.
module Response.Response
data Response
Response :: StatusCode -> ByteString -> Headers -> ByteString -> Response
[statusCode] :: Response -> StatusCode
[version] :: Response -> ByteString
[headers] :: Response -> Headers
[content] :: Response -> ByteString

-- | Extract the response status code.
getStatusCode :: Response -> Integer

-- | Extract the response reaso phrase.
getReasonPhrase :: Response -> String

-- | Extract the http version.
getVersion :: Response -> ByteString

-- | Extract the response headers.
getHeaders :: Response -> Headers

-- | Extract the response content
getContent :: Response -> ByteString

-- | Template for building an OK response where only the request content is
--   missing.
buildOkResponse :: Headers -> (ByteString -> Response)

-- | Template for building a NotFound response where only the request
--   content is missing.
buildNotFoundResponse :: Headers -> (ByteString -> Response)

-- | Template for building a InternalServerError Response where only the
--   request content is missing.
buildInternalServerErrorResponse :: Headers -> (ByteString -> Response)

-- | Transform a response to its ByteString representation.
toByteString :: Response -> ByteString


-- | Response errors.
module Response.Error
data Error
FileDoesNotExist :: String -> Error
OtherError :: Error
instance GHC.Show.Show Response.Error.Error


-- | The Error Module, containing predefined errors. These can occur, when
--   a Request is parsed.
module Request.Error

-- | Constructors for different kinds of error.
data ParseError

-- | Error, when the first line of the request is not correctly formated.
RequestLineMalformed :: ByteString -> ParseError

-- | Error, when the Http-Method of the request is not supported.
HttpMethodNotSupported :: ByteString -> ParseError

-- | Error, when the Http Version of the request is not supported.
HttpVersionNotSupported :: ByteString -> ParseError
UnknownParseError :: ByteString -> ParseError
instance GHC.Classes.Eq Request.Error.ParseError
instance GHC.Show.Show Request.Error.ParseError


-- | bundles internal functions and datatypes to parse a Http-Request.
module Request.Internal.Request

-- | top level function, that is used to parse a request from a handle.
parseRequest :: Handle -> IO Request

-- | Parses a request from a bytestring.
parseRequestFromString :: [ByteString] -> Request

-- | parses the request from a handle line by line to a list of
--   bytesstrings.
parseToString :: Handle -> [ByteString] -> IO [ByteString]

-- | parses the headers from a list of bytestrings, that contain the lines.
parseHeaders :: [ByteString] -> [(ByteString, [ByteString])]

-- | reads one header to a tupel (headername, listOfValues)
parseHeader :: ByteString -> (ByteString, [ByteString])

-- | Top level function for parsing a byteString to a RequestLine.
fromString :: ByteString -> ParseMonad RequestLine

-- | The constructor of the request. A request contains a requestline
--   (methond, path and http-version) and a list of headers.
data Request
Request :: RequestLine -> [(ByteString, [ByteString])] -> Request
[requestLine] :: Request -> RequestLine
[headers] :: Request -> [(ByteString, [ByteString])]
data RequestLine
RequestLine :: ByteString -> ByteString -> ByteString -> RequestLine
[method] :: RequestLine -> ByteString
[path] :: RequestLine -> ByteString
[version] :: RequestLine -> ByteString
instance GHC.Classes.Eq Request.Internal.Request.Request
instance GHC.Show.Show Request.Internal.Request.Request
instance GHC.Classes.Eq Request.Internal.Request.RequestLine
instance GHC.Show.Show Request.Internal.Request.RequestLine


-- | The Request module bundles functions and datatypes to parse a
--   Http-Request.
module Request.Request

-- | top level function, that is used to parse a request from a handle.
parseRequest :: Handle -> IO Request

-- | The constructor of the request. A request contains a requestline
--   (methond, path and http-version) and a list of headers.
data Request
Request :: RequestLine -> [(ByteString, [ByteString])] -> Request
[requestLine] :: Request -> RequestLine
[headers] :: Request -> [(ByteString, [ByteString])]
data RequestLine
RequestLine :: ByteString -> ByteString -> ByteString -> RequestLine
[method] :: RequestLine -> ByteString
[path] :: RequestLine -> ByteString
[version] :: RequestLine -> ByteString

-- | Top level function for parsing a byteString to a RequestLine.
fromString :: ByteString -> ParseMonad RequestLine

module Read

-- | Read a file and wrap the result into an Either for easier error
--   handling.
read :: String -> IO RequestResult


-- | This module represents the webserver.
module Server

-- | Start the server with a path to a config file.
start :: String -> IO ()
